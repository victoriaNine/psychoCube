$red: rgba(100, 0, 0, 0);
$orange: rgba(100, 50, 0, 0);
$white: rgba(100, 100, 100, 0);
$green: rgba(0, 100, 0, 0);
$yellow: rgba(100, 100, 0, 0);
$blue: rgba(0, 0, 100, 0);

$darkGrey:#222;
$brightBlue: #37AEB8;
$palePink: #CC5880;
$translucentDarkGrey: rgba(12,12,12,.75);


/*=======================*/
/* MIXINS
/*=======================*/
@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }  
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }  
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};      
}

@mixin transform($str) {
  -webkit-transform: #{$str};
  -moz-transform: #{$str};
  -ms-transform: #{$str};
  -o-transform: #{$str};
  transform: #{$str};
}

@mixin transition($str) {
  -webkit-transition: -webkit-#{$str};
  -moz-transition: -moz-#{$str};
  -ms-transition: -ms-#{$str};
  -o-transition: -o-#{$str};
  transition: #{$str};
}

.brightBlue { color:$brightBlue; }
.italic { font-style: italic; }
.w700 { font-weight: 700; }


/*=======================*/
/* GENERAL RULES
/*=======================*/
html, body {
  overflow:hidden;
  background:#DDD;
  color: $darkGrey;
  text-transform: uppercase;
  font-family: "Open Sans", sans-serif;
  font-weight: 400;
}

body.moving { cursor:move; cursor:-webkit-grabbing; }

.screen {
  position:absolute;
  width: 100%;
  height: 100%;
  top:0;
  left:0;
}

.overlay {
  z-index: 9999;
  background: rgba(0,0,0,.95);
  opacity: 0;
  pointer-events:none;

  @include transform("scale(1.2)");
  @include transition("all .2s .4s ease-out");
}

.overlay.active {
  opacity: 1;
  pointer-events:auto;
  @include transform("scale(1)");
  @include transition("all .2s ease-out");
}

button {
  border:none;
  background:none;
  font-family: inherit;
  box-sizing: border-box;
  outline: none;
  cursor:pointer;
  text-transform: inherit;
  display: block;
  color:inherit;
}

#menu {
  position: absolute;
  left: 0;
  top: 0;
  padding-top:3em;
  box-sizing: border-box;
  width:18em;
  height: 100%;
  z-index: 10;
  background:rgba(0, 0, 0, .95);
  color:#CCC;
}

#menu button {
  width:100%;
  height:2.5em;
  line-height:2.5em;
  background:rgba(255, 255, 255, .025);
  margin-bottom: 1px;
  text-align: left;
  padding-left:3em;
  position: relative;
  font-style: italic;

  transition: all .2s .4s ease-out;
}

#menu button:before {
  content:"";
  width: .75em;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  background: $brightBlue;

  transition:width .4s cubic-bezier(.4,1,.6,0), background .2s ease-out;
}

#menu button.palePink:before { background: $palePink; }
#menu button:hover, body.paused #pause { color:$darkGrey; font-weight:900; }
#menu button:hover:before, body.paused #pause:before { width: 100%; }

.timer { margin-bottom: 1.5em; padding-left:3em; box-sizing: border-box; }
.timer .value {
  font-family: "Abel", sans-serif;
  font-size: 2em;
  margin-top: .1em;
  display: block;
}
#totalTime { margin-bottom: 3em; }

html:not(.debug) #resetCube { display: none; }

#psychoCube {
  position: absolute;
  transform-style: preserve-3d;
  width: 27em;
  height: 27em;
  @include animation("levitate 8s ease-in-out infinite");
}

@include keyframes(levitate) {
  0%, 100% { transform: translate3d(27em,27em,-27em); }
  50% { transform: translate3d(27em,29em, -27em); }
}

#protoCube, #protoPyramid { display:none; }

.cube {
  position: absolute;
  width: 9em;
  height: 9em;
  top: 0;
  left: 0;
  transform-style: preserve-3d;
  transform-origin: 13.5em 13.5em 0em;

  transition: transform .3s ease-in-out;
}

body:not(.moving) .cube:hover { cursor: pointer; }

@for $z from 1 through 3 {
  @for $y from 1 through 3 {
    @for $x from 1 through 3 {
      $translateX : $x * 9 - 9;
      $translateY : $y * 9 - 9;
      $translateZ : $z * -9 + 18;

      .cube#{$z}-#{$y}-#{$x} { 
        transform: translate3d(#{$translateX}em, #{$translateY}em, #{$translateZ}em);
      }
    }
  }
}

/* /!\ You need to add vendor prefixes in order to render the CSS properly (or simply use http://leaverou.github.io/prefixfree/) /!\ */
#tridiv {
  perspective: 800px;
  position: absolute;
  overflow: hidden;
  width: 100%;
  height: 100%;
  background: transparent;
  font-size: 100%;

  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  -o-user-select: none;
  user-select: none;
}

#scene, .shape, .face, .face-wrapper, .cr {
  position: absolute;
  transform-style: preserve-3d;
}
#scene {
  width: 80em;
  height: 80em;
  left: calc(50% - (80em - 18em) / 2);
  top: calc(50% - 80em / 2);
  transform-origin: 50% 50% -27em;
}
.shape {
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  transform-origin: 50%;
}
.face, .face-wrapper {
  overflow: hidden;
  transform-origin: 0 0;
  backface-visibility: hidden;
  /* hidden by default, prevent blinking and other weird rendering glitchs */
}
.face {
  background-size: 100% 100%!important;
  background-position: center;
}
.face-wrapper .face {
  left: 100%;
  width: 100%;
  height: 100%
}
.photon-shader {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%
}
.side {
  left: 50%;
}
.cr, .cr .side {
  height: 100%;
}
[class*="cuboid"] .ft, [class*="cuboid"] .bk {
  width: 100%;
  height: 100%;
}
[class*="cuboid"] .bk {
  left: 100%;
}
[class*="cuboid"] .rt {
  transform: rotateY(-90deg) translateX(-50%);
}
[class*="cuboid"] .lt {
  transform: rotateY(90deg) translateX(-50%);
}
[class*="cuboid"] .tp {
  transform: rotateX(90deg) translateY(-50%);
}
[class*="cuboid"] .bm {
  transform: rotateX(-90deg) translateY(-50%);
}
[class*="cuboid"] .lt {
  left: 100%;
}
[class*="cuboid"] .bm {
  top: 100%;
}
[class*="pyramid"] > .face-wrapper .face {
  transform: rotateZ(45deg) translateX(-35.35%) translateY(35.35%);
}
[class*="pyramid"] > .bk {
  left: 100%;
}
[class*="pyramid"] > .bm {
  top: 100%;
  transform: rotateX(-90deg) translateY(-50%);
}
[class*="pyramid"] > .rt, [class*="pyramid"] > .lt {
  transform-origin: 50% 0;
}
/* .block styles */
.block {
  transform:translate3D(0em, 0em, 0em) rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  opacity:1;
  width:9em;
  height:9em;
  margin:-4.5em 0 0 -4.5em;
}
.block .ft {
  transform:translateZ(4.5em);
}
.block .bk {
  transform:translateZ(-4.5em) rotateY(180deg);
}
.block .rt, .block .lt {
  width:9em;
  height:9em;
}
.block .tp, .block .bm {
  width:9em;
  height:9em;
}
.block .face {
  background-color:$translucentDarkGrey;
  box-shadow: inset 0px 0px 1em .25em rgba(255, 255, 255, .025);
}
.block .ft {
  width:9em;
  margin-left:0em;
}
.block .bk {
  width:9em;
  margin-left:0em;
}
.block .rt, .block .lt {
  width:9em;
}
.block .tp, .block .bm, .block .tp .photon-shader, .block .bm .photon-shader {
  border-radius:0em;
}
.block .cr {
  width:0em;
  left:0em;
}
.block .cr-0 {
  transform: translate3D(9em, 0, 4.5em);
}
.block .cr-1 {
  transform: translate3D(9em, 0, -4.5em);
}
.block .cr-2 {
  transform: translate3D(0, 0, -4.5em);
}
.block .cr-3 {
  transform: translate3D(0, 0, 4.5em);
}
.block .cr-0 .s0 {
  transform: rotateY(15deg) translate3D(-50%, 0, -0.025em);
}
.block .cr-0 .s1 {
  transform: rotateY(45deg) translate3D(-50%, 0, -0.025em);
}
.block .cr-0 .s2 {
  transform: rotateY(75deg) translate3D(-50%, 0, -0.025em);
}
.block .cr-1 .s0 {
  transform: rotateY(105deg) translate3D(-50%, 0, -0.025em);
}
.block .cr-1 .s1 {
  transform: rotateY(135deg) translate3D(-50%, 0, -0.025em);
}
.block .cr-1 .s2 {
  transform: rotateY(165deg) translate3D(-50%, 0, -0.025em);
}
.block .cr-2 .s0 {
  transform: rotateY(195deg) translate3D(-50%, 0, -0.025em);
}
.block .cr-2 .s1 {
  transform: rotateY(225deg) translate3D(-50%, 0, -0.025em);
}
.block .cr-2 .s2 {
  transform: rotateY(255deg) translate3D(-50%, 0, -0.025em);
}
.block .cr-3 .s0 {
  transform: rotateY(285deg) translate3D(-50%, 0, -0.025em);
}
.block .cr-3 .s1 {
  transform: rotateY(315deg) translate3D(-50%, 0, -0.025em);
}
.block .cr-3 .s2 {
  transform: rotateY(345deg) translate3D(-50%, 0, -0.025em);
}
.block .side {
  width:0.025em;
}

/* .pyramid styles */
.pyramid {
  opacity:1;
  width:9em;
  height:3em;
  margin:-1.5em 0 0 -4.5em;
  transition:all .2s ease-out;
}
.pyramid > .face-wrapper {
  width:9em;
  height:4.5em;
}
.pyramid > .face-wrapper .face {
  width:9em;
  height:9em;
  background-color:$translucentDarkGrey;
}
.pyramid > .ft {
  transform:scaleZ(1.2018504251546631) scaleY(1.2018504251546631) rotateX(56.30993247402022deg);
}
.pyramid > .bk {
  transform:scaleZ(1.2018504251546631) scaleY(1.2018504251546631) rotateX(-56.30993247402022deg) rotateY(180deg);
}
.pyramid > .rt {
  transform:scaleX(1.2018504251546631) scaleY(1.2018504251546631) rotateZ(56.30993247402022deg) rotateY(-90deg);
}
.pyramid > .lt {
  transform:scaleX(1.2018504251546631) scaleY(1.2018504251546631) rotateZ(-56.30993247402022deg) rotateY(90deg);
}
.pyramid > .bm {
  width:9em;
  height:9em;
}

/* .pyr-2 styles */
.pyramid-front {
  transform:translate3D(0em, 0em, 6em) rotateX(90deg) rotateY(0deg) rotateZ(180deg);
}
.pyramid-back {
  transform:translate3D(0em, 0em, -6em) rotateX(90deg) rotateY(0deg) rotateZ(0deg);
}
.pyramid-top {
  transform:translate3D(0em, -6em, 0em) rotateX(0deg) rotateY(0deg) rotateZ(0deg);
}
.pyramid-bottom {
  transform: translate3D(0em, 6em, 0em) rotateX(180deg) rotateY(0deg) rotateZ(0deg);
}
.pyramid-left {
  transform:translate3D(-6em, 0em, 0em) rotateX(90deg) rotateY(0deg) rotateZ(-90deg);
}
.pyramid-right {
  transform:translate3D(6em, 0em, 0em) rotateX(90deg) rotateY(0deg) rotateZ(90deg);
}

.color-red > .face-wrapper .face {
  // front : red
  box-shadow: inset 0 0 0 1px opacify($red, .5);
}

html:not(.noGlow) .color-red > .face-wrapper .face {
  // front : red
  @include animation("redBorder 2s ease-out infinite");
}

.color-orange > .face-wrapper .face {
  // back : orange
  box-shadow: inset 0 0 0 1px opacify($orange, .5);
}

html:not(.noGlow) .color-orange > .face-wrapper .face {
  // back : orange
  @include animation("orangeBorder 2s ease-out infinite");
}

.color-white > .face-wrapper .face {
  // top : white
  box-shadow: inset 0 0 0 1px opacify($white, .5);
}

html:not(.noGlow) .color-white > .face-wrapper .face {
  // top : white
  @include animation("whiteBorder 2s ease-out infinite");
}

.color-green > .face-wrapper .face {
  // bottom : green
  box-shadow: inset 0 0 0 1px opacify($green, .5);
}

html:not(.noGlow) .color-green > .face-wrapper .face {
  // bottom : green
 @include animation("greenBorder 2s ease-out infinite");
}

.color-yellow > .face-wrapper .face {
  // left : yellow
  box-shadow: inset 0 0 0 1px opacify($yellow, .5);
}

html:not(.noGlow) .color-yellow > .face-wrapper .face {
  // left : yellow
  @include animation("yellowBorder 2s ease-out infinite");
}

.color-blue > .face-wrapper .face {
  // right : blue
  box-shadow: inset 0 0 0 1px opacify($blue, .5);
}

html:not(.noGlow) .color-blue > .face-wrapper .face {
  // right : blue
  @include animation("blueBorder 2s ease-out infinite");
}

@include keyframes(redBorder) {
  0%, 100% { box-shadow: inset 0 0 0 1px opacify($red, .5); }
  50% { box-shadow: inset 0 0 4px 1px opacify($red, .75); }
}

@include keyframes(orangeBorder) {
  0%, 100% { box-shadow: inset 0 0 0 1px opacify($orange, .5); }
  50% { box-shadow: inset 0 0 4px 1px opacify($orange, .75); }
}

@include keyframes(whiteBorder) {
  0%, 100% { box-shadow: inset 0 0 0 1px opacify($white, .5); }
  50% { box-shadow: inset 0 0 4px 1px opacify($white, .75); }
}

@include keyframes(greenBorder) {
  0%, 100% { box-shadow: inset 0 0 0 1px opacify($green, .5); }
  50% { box-shadow: inset 0 0 4px 1px opacify($green, .75); }
}

@include keyframes(yellowBorder) {
  0%, 100% { box-shadow: inset 0 0 0 1px opacify($yellow, .5); }
  50% { box-shadow: inset 0 0 4px 1px opacify($yellow, .75); }
}

@include keyframes(blueBorder) {
  0%, 100% { box-shadow: inset 0 0 0 1px opacify($blue, .5); }
  50% { box-shadow: inset 0 0 4px 1px opacify($blue, .75); }
}

$roofWidth: .75;
/* .roof styles */
.roof {
  transform: translate3D(0em, #{-1 - $roofWidth / 2}em, 0em) rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  opacity: 1;
  width: #{$roofWidth}em;
  height: .25em;
  margin: -0.125em 0 0 -#{$roofWidth / 2}em;
}
.roof .ft {
  transform:translateZ(#{$roofWidth / 2}em);
}
.roof .bk {
  transform:translateZ(-#{$roofWidth / 2}em) rotateY(180deg);
}
.roof .rt, .roof .lt {
  width:#{$roofWidth}em;
  height:.25em;
}
.roof .tp, .roof .bm {
  width:#{$roofWidth}em;
  height:#{$roofWidth}em;
}

.color-red .roof .face {
  background: opacify($red, .25); box-shadow: inset 0 0 0 1px opacify($red, .5);
}

html:not(.noGlow) .color-red .roof .face {
  @include animation("redRoof 2s ease-out infinite");
}

.color-orange .roof .face {
  background: opacify($orange, .25); box-shadow: inset 0 0 0 1px opacify($orange, .5);
}

html:not(.noGlow) .color-orange .roof .face {
  @include animation("orangeRoof 2s ease-out infinite");
}

.color-white .roof .face {
  background: opacify($white, .25); box-shadow: inset 0 0 0 1px opacify($white, .5);
}

html:not(.noGlow) .color-white .roof .face {
  @include animation("whiteRoof 2s ease-out infinite");
}

.color-green .roof .face {
  background: opacify($green, .25); box-shadow: inset 0 0 0 1px opacify($green, .5);
}

html:not(.noGlow) .color-green .roof .face {
  @include animation("greenRoof 2s ease-out infinite");
}

.color-yellow .roof .face {
  background: opacify($yellow, .25); box-shadow: inset 0 0 0 1px opacify($yellow, .5);
}

html:not(.noGlow) .color-yellow .roof .face {
  @include animation("yellowRoof 2s ease-out infinite");
}

.color-blue .roof .face {
  background: opacify($blue, .25); box-shadow: inset 0 0 0 1px opacify($blue, .5);
}

html:not(.noGlow) .color-blue .roof .face {
  @include animation("blueRoof 2s ease-out infinite");
}

@include keyframes(redRoof) {
  0%, 100% { background: opacify($red, .25); box-shadow: inset 0 0 0 1px opacify($red, 0.5); }
  50% { background: opacify($red, .5); box-shadow: inset 0 0 4px 1px opacify($red, .75); }
}

@include keyframes(orangeRoof) {
  0%, 100% { background: opacify($orange, .25); box-shadow: inset 0 0 0 1px opacify($orange, .5); }
  50% { background: opacify($orange, .5); box-shadow: inset 0 0 4px 1px opacify($orange, .75); }
}

@include keyframes(whiteRoof) {
  0%, 100% { background: opacify($white, .25); box-shadow: inset 0 0 0 1px opacify($white, .5); }
  50% { background: opacify($white, .5); box-shadow: inset 0 0 4px 1px opacify($white, .75); }
}

@include keyframes(greenRoof) {
  0%, 100% { background: opacify($green, .25); box-shadow: inset 0 0 0 1px opacify($green, .5); }
  50% { background: opacify($green, .5); box-shadow: inset 0 0 4px 1px opacify($green, .75); }
}

@include keyframes(yellowRoof) {
  0%, 100% { background: opacify($yellow, .25); box-shadow: inset 0 0 0 1px opacify($yellow, .5); }
  50% { background: opacify($yellow, .5); box-shadow: inset 0 0 4px 1px opacify($yellow, .75); }
}

@include keyframes(blueRoof) {
  0%, 100% { background: opacify($blue, .25); box-shadow: inset 0 0 0 1px opacify($blue, .5); }
  50% { background: opacify($blue, .5); box-shadow: inset 0 0 4px 1px opacify($blue, .75); }
}


/* ROTATION MENU */
body.selecting .cube:not(.selected) {
  opacity:.15;
  transition: opacity .2s ease-in-out;

  @include animation("transparency 2s ease-out infinite");
}

@include keyframes(transparency) {
  0%, 100% { opacity:.15; }
  50% { opacity:.35; }
}

#rotationMenu {
  position: absolute;
  width: 20px;
  height: 20px;
  top:calc(50% - 10px);
  left: calc(50% - 10px);
  opacity:0;
  pointer-events:none;
  transition: all .2s ease-in-out;
  z-index: 20;
  background: opacify($white, .5);
  border-radius: 50%;

  transform:scale(1.5) translate(-50%, -50%);
}

#rotationMenu:before {
  content:"";
  position:absolute;
  width:100px;
  height:100px;
  border:1px solid opacify($white, .5);
  border-radius: 50%;
  top: calc(50% - 50px);
  left: calc(50% - 50px);
}

#rotationMenu.open {
  opacity:1;
  transform:scale(1) translate(-50%, -50%);
  pointer-events:auto;
}

#rotationMenu button {
  border:1px solid;
  background: $translucentDarkGrey;
  padding: 8px;
  margin-bottom: 1.5em;
  letter-spacing: inherit;

  position:absolute;
  margin:0;
  width: 30px;
  height: 30px;
}

#rotationMenu button:hover { background: #191919; }

#toFront { transform: translate(-50px, 60%); }
#toBack { transform: translate(40px, 60%); }
#toLeft { transform: translate(-50px, -60%); }
#toRight { transform: translate(40px, -60%); }
#toUp { transform: translate(-25%, -50px); }
#toDown { transform: translate(-25%, 40px); }