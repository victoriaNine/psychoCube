{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"br",
				"brightBlue"
			],
			[
				"getF",
				"getFormatedDate"
			],
			[
				"fini",
				"finishDate"
			],
			[
				"total",
				"totalActions"
			],
			[
				"play",
				"playerName"
			],
			[
				"date",
				"date_string"
			],
			[
				"high",
				"highScores"
			],
			[
				"has",
				"hasClass"
			],
			[
				"fon",
				"fontSize18px"
			],
			[
				"tran",
				"transition: "
			],
			[
				"font-s",
				"font-size: "
			],
			[
				"font-",
				"font-family: "
			],
			[
				"font",
				"font-weight: "
			],
			[
				"text",
				"text-align: "
			],
			[
				"padding",
				"padding-bottom: "
			],
			[
				"border",
				"border-bottom: "
			],
			[
				"content",
				"justify-content: "
			],
			[
				"inlin",
				"inline-block"
			],
			[
				"transform",
				"transform-origin: "
			],
			[
				"box",
				"box-sizing: "
			],
			[
				"clear",
				"clearInterval"
			],
			[
				"rand",
				"randomizeCube"
			],
			[
				"random",
				"randomActions"
			],
			[
				"rando",
				"randomActions"
			],
			[
				"transfo",
				"transform-origin: "
			],
			[
				"o",
				"opacityDelta"
			],
			[
				"re",
				"requestAnimationFrame"
			],
			[
				"min",
				"minSpeed"
			],
			[
				"new",
				"newRotateX"
			],
			[
				"fin",
				"finishDate"
			],
			[
				"acti",
				"actionArray"
			],
			[
				"pla",
				"playerName"
			],
			[
				"ci",
				"currentTime"
			],
			[
				"margin",
				"margin-bottom: "
			],
			[
				"bord",
				"border-color: "
			],
			[
				"col",
				"colRotation"
			],
			[
				"row",
				"rowRotation"
			],
			[
				"n",
				"newTransform"
			],
			[
				"curre",
				"currentFile"
			],
			[
				"per",
				"percentCool"
			],
			[
				"fontS",
				"fontSize24px"
			],
			[
				"fontSize",
				"fontSize16px"
			],
			[
				"ease",
				"easeOut"
			],
			[
				"intro",
				"introComplete"
			],
			[
				"tnS",
				"tnSongPosition"
			],
			[
				"audio",
				"audioEngine"
			],
			[
				"retry",
				"retryGame"
			],
			[
				"tri",
				"triggerPause"
			],
			[
				"percent",
				"percentGreat"
			],
			[
				"bo",
				"border-radius"
			],
			[
				"bor",
				"borderRadius"
			],
			[
				"ba",
				"baseNoteLength"
			],
			[
				"song",
				"songPosition"
			],
			[
				"key",
				"keyName"
			],
			[
				"gam",
				"gameOver"
			],
			[
				"combo",
				"comboArray"
			],
			[
				"get",
				"getCurrentPosition"
			],
			[
				"_st",
				"_staffScroll"
			],
			[
				"pau",
				"pausedAt"
			],
			[
				"star",
				"startedAt"
			],
			[
				"_sta",
				"_staffLength"
			],
			[
				"not",
				"noteScale"
			],
			[
				"ti",
				"timeSignature"
			],
			[
				"va",
				"value"
			],
			[
				"is",
				"isTransitioning"
			],
			[
				"loaded",
				"loadedFiles"
			],
			[
				"gain",
				"gainTransition"
			],
			[
				"auto",
				"autoMuteSound"
			],
			[
				"toggle",
				"toggleMute"
			],
			[
				"max",
				"max-width"
			],
			[
				"sw",
				"soundSwitch"
			],
			[
				"close",
				"closeWindow"
			],
			[
				"files",
				"filesNb"
			],
			[
				"file",
				"filesLoaded"
			],
			[
				"fi",
				"filesLoaded"
			],
			[
				"pa",
				"padding"
			],
			[
				"im",
				"important"
			],
			[
				"te",
				"text-align"
			],
			[
				"phone",
				"phonecheck"
			],
			[
				"chan",
				"changeCanvas"
			],
			[
				"cancel",
				"cancelMenu"
			],
			[
				"fu",
				"function"
			],
			[
				"mouse",
				"mouseenter"
			],
			[
				"open",
				"openWindow"
			],
			[
				"BGM",
				"BGMloaded"
			],
			[
				"cur",
				"currentGain2"
			],
			[
				"current",
				"currentGain1"
			],
			[
				"source",
				"sourceArray"
			],
			[
				"buffe",
				"bufferList"
			],
			[
				"pr",
				"primalTimbre"
			],
			[
				"start",
				"startDelay"
			],
			[
				"planet",
				"planet_rotate"
			],
			[
				"mete",
				"meteorFalling"
			],
			[
				"meteor",
				"meteorFalling"
			],
			[
				"cra",
				"craters_y"
			],
			[
				"plan",
				"planet_y"
			],
			[
				"l",
				"loadedImg"
			],
			[
				"in",
				"inline-block"
			],
			[
				"line",
				"lineLength"
			],
			[
				"marg",
				"margin-bottom"
			],
			[
				"call",
				"callback"
			],
			[
				"autoCl",
				"autoCloseDelay"
			],
			[
				"text-",
				"text-align"
			],
			[
				"on",
				"onComplete"
			],
			[
				"T",
				"TimelineMax"
			],
			[
				"swit",
				"switchDelay"
			],
			[
				"min-",
				"min-height"
			],
			[
				"scre",
				"screen_Play_In"
			],
			[
				"mobile",
				"mobilecheck"
			],
			[
				"scree",
				"screen_Menu"
			],
			[
				"init",
				"initWidth"
			],
			[
				"mar",
				"margin"
			],
			[
				"men",
				"menuLines"
			],
			[
				"wid",
				"width"
			],
			[
				"w",
				"width"
			]
		]
	},
	"buffers":
	[
		{
			"file": "app/index.html",
			"settings":
			{
				"buffer_size": 21641,
				"line_ending": "Windows"
			}
		},
		{
			"file": "app/css/main.scss",
			"settings":
			{
				"buffer_size": 26236,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "window.requestAnimationFrame = (function() {\n  return window.requestAnimationFrame ||\n         window.webkitRequestAnimationFrame ||\n         window.mozRequestAnimationFrame ||\n         window.msRequestAnimationFrame ||\n         function(callback) { window.setTimeout(callback, 1000 / 60); };\n})();\n\nvar support = {animations : Modernizr.cssanimations},\n  animEndEventNames = {'WebkitAnimation' : 'webkitAnimationEnd', 'OAnimation' : 'oAnimationEnd', 'msAnimation' : 'MSAnimationEnd', 'animation' : 'animationend'},\n  animEndEventName = animEndEventNames[Modernizr.prefixed('animation')],\n  onEndAnimation = function(el, callback) {\n    var onEndCallbackFn = function(ev) {\n      if(support.animations) {\n        if(ev.target != this) return;\n        this.removeEventListener(animEndEventName, onEndCallbackFn);\n      }\n      if(callback && typeof callback === 'function') callback.call();\n    };\n    if(support.animations) el.addEventListener(animEndEventName, onEndCallbackFn);\n    else onEndCallbackFn();\n  },\n  eventtype = mobileCheck() ? 'touchend' : 'click';\n\nvar $game;\nvar $isNewGame = false;\nvar $isReady = false;\n\nvar $playerName = \"\";\nvar $finishDate = null;\nvar $totalTime;\nvar $saveCount = 0;\n\nvar $actionArray = [];\nvar $actionIndex = 0;\nvar $totalActions = 0;\n\nvar $currentTime;\nvar $startTotalTime;\nvar $updateTimer = null;\n\nvar $protoCube;\nvar $protoPyramid;\nvar $listenersAdded;\n\nvar $audioEngine;\n\n\n//===============================\n// MAIN INITIALIZATION\n$(document).ready(function() {\n//===============================\n  if(mobileCheck()) $(\"html\").addClass(\"isMobile\");\n  if(phoneCheck()) $(\"html\").addClass(\"isPhone\");\n  if(tabletCheck()) $(\"html\").addClass(\"isTablet\");\n\n  if(navigator.appName == \"Microsoft Internet Explorer\") {\n      var agent = navigator.userAgent;\n\n      if(agent.match(/MSIE ([0-9]{1,}[\\.0-9]{0,})/) != null) {\n          var version = parseFloat(RegExp.$1);\n          $(\"html\").addClass(\"ie\"+version);\n      }\n  };\n\n  // Show the loading screen\n  var timeline = new TimelineMax({ onComplete: function() { clearProps(this); } });\n  timeline.from(\"#screen_about .container\", 2, { opacity:0, ease: RoughEase.ease.config({ template: Bounce.easeOut, strength: 1, points: 20, taper: \"none\", randomize: true, clamp: true }) });\n  timeline.to(\"#screen_about .container\", .05, { transform:\"skewX(60deg) scale(1.25)\" }, 1);\n  timeline.to(\"#screen_about .container\", .05, { transform:\"none\" }, 1.1);\n  timeline.to(\"#screen_about .logo\", .05, { opacity:.5, transform:\"skewX(-60deg) scale(1.25)\" }, 1.5);\n  timeline.to(\"#screen_about .logo\", .05, { opacity:1, transform:\"none\" }, 1.6);\n\n  // Add event listeners on the loaded files\n  $(document).on(\"loadingBGM loadingSFX\", loadingScreen);\n\n  // Initialize the audio engine\n  $audioEngine = AudioEngine.getInstance();\n  $audioEngine.BGM.setFile(\"hologram\");\n  $audioEngine.BGM.addSource(\"audio/bgm/hologram\");\n\n  // Save the cube and pyramid prototypes in variables and remove them from the DOM\n  $protoCube = $(\"#protoCube\").clone();\n  $protoPyramid = $(\"#protoPyramid\").clone();\n  $(\"#scene\").find(\"#protoCube, #protoPyramid\").remove();\n});\n\n\n//===============================\n// GAME SCREENS\n//===============================\nfunction loadingScreen() {\n  var percentBGM = ($audioEngine.loadBGM * 100 / $audioEngine.loadBGMTotal);\n  var percentSFX = ($audioEngine.loadSFX * 100 / $audioEngine.loadSFXTotal);\n\n  if(isNaN(percentBGM) || !isFinite(percentBGM)) percentBGM = 0;\n  if(isNaN(percentSFX) || !isFinite(percentSFX)) percentSFX = 0;\n\n  var totalPercent = (percentBGM + percentSFX) / 2;\n  var currentValue = parseFloat($(\"#loading .value\").html());\n\n  var fadeIn = isNaN(currentValue) ? true : false;\n  if(isNaN(currentValue) || !isFinite(currentValue)) currentValue = 0;\n\n  var fadeHue = TweenMax.fromTo(\"#loadingHue\", 1, { backgroundColor:\"#CC5880\" }, { backgroundColor:\"#37AEB8\" });\n  scrollToValue($(\"#loading .value\"), currentValue, totalPercent.toFixed(1), true, fadeIn, false, true).eventCallback(\"onComplete\",\n    function() {\n      fadeHue.progress(totalPercent / 100);\n\n      if(totalPercent == 100) {\n        $(document).off(\"loadingBGM loadingSFX\", loadingScreen);\n        $(\"body\").addClass(\"loaded\");\n        \n        /* About and Inspiration screens event listeners  ------------*/\n        $(\"#screen_about .info\").on(eventtype, function() {\n          toggleScreen(\"about\", false);\n\n          // If we're initializing the game\n          if(!$game) {\n            setTimeout(function() {\n              // Wait until the screen fades out to remove the background\n              // And update the info button\n              $(\"#screen_about\").removeClass(\"loading\");\n              $(\"#screen_about .info\").html(\"Click here to close\");\n\n              // Start the BGM and go to the game screen\n              $audioEngine.BGM.play();\n              toGameScreen();\n            }, 600);\n          }\n        });\n\n        $(\"#screen_about .inspiration\").on(eventtype, function() {\n          toggleScreen(\"inspiration\", true);\n        });\n\n        $(\"#screen_inspiration .close\").on(eventtype, function() {\n          toggleScreen(\"inspiration\", false);\n        });\n      }\n    }\n  );\n}\n\nfunction toGameScreen() {\n  var load = function() {\n    // If the player has a game save\n    if(getLocalStorage(\"psychoCube_Game\")) {\n      // Fetch the data from the local storage\n      $game = getLocalStorage(\"psychoCube_Game\");\n\n      initGame();\n    }\n    // If not, initialize it with a \"new game\" flag on\n    else initGame(true);\n  }\n\n  // Show the game screen\n  toggleScreen(\"main\", true);\n\n  // Sidebar animation\n  var timeline = new TimelineMax({ onComplete: function() { clearProps(this); } });\n  timeline.set(\"#sidebar button\", { transition:\"none\" });\n  timeline.from(\"#sidebar\", .5, { opacity:0, left:\"-18em\", ease:Power4.easeOut });\n  timeline.staggerFrom(\"#sidebar button\", .2, { transform:\"rotateX(90deg)\" }, .1);\n\n  // Add a scrollbar to the menu (for smaller screen sizes)\n  $(\"#menu\").mCustomScrollbar({ theme:\"minimal\", autoHideScrollbar: true });\n\n  // Disable the glow FX by default and load the game\n  glowSwitch();\n  load();\n}\n\nfunction toHighScores() {\n  var highScores = getLocalStorage(\"psychoCube_HighScores\") || [[], [], [], [], [], [], [], [], [], []];\n\n  for(var i = 0; i < highScores.length; i++) {\n    if(highScores[i].length == 0) break;\n\n    var nb = $(\"<span>\").addClass(\"col col1\").html((i+1) > 9 ? (i+1) : \"0\"+(i+1));\n    var playerName = $(\"<span>\").addClass(\"col col2\").html(highScores[i].playerName);\n    var finishDate = $(\"<span>\").addClass(\"col col3\").html(getFormatedDate(highScores[i].finishDate));\n    var totalTime = $(\"<span>\").addClass(\"col col4\").html(getFormatedTime(highScores[i].totalTime));\n    var totalActions = $(\"<span>\").addClass(\"col col5\").html(highScores[i].totalActions);\n    var saveCount = $(\"<span>\").addClass(\"col col6\").html(highScores[i].saveCount);\n\n    $(\"#screen_highScores .row\").eq(i+1).empty().append(nb, playerName, finishDate, totalTime, totalActions, saveCount);\n  }\n\n  toggleScreen(\"highScores\", true);\n}\n\nfunction toggleScreen(screenName, state) {\n  pause();\n\n  var screen = $(\"#screen_\"+screenName);\n\n  if(state == true) screen.addClass(\"active\");\n  else if(state == false) screen.removeClass(\"active\");\n  else screen.toggleClass(\"active\");\n}\n\n\n//===============================\n// GAME SEQUENCES\n//===============================\nfunction initGame(isNewGame, reinit) {\n  $isReady = false;\n\n  // If the game is being reinitialized (ie. the player pressed \"new cube\")\n  if(reinit) {\n    // Reset the timer\n    clearInterval($updateTimer);\n    // Remove any possible \"pause\" flag\n    if($(\"body\").hasClass(\"paused\")) $(\"body\").removeClass(\"paused\");\n  }\n\n  // If the player is starting a new game, initialize the game data\n  // And set the \"new game\" flag\n  if(isNewGame) {\n    $game = { playerName: \"\", finishDate: null, totalTime: 0, saveCount: 0, totalActions: 0, actionIndex: 0, actions: [], cubes: {} };\n    $isNewGame = true;\n  }\n\n  // Set the current game instance data\n  $playerName = $game.playerName;\n  $finishDate = $game.finishDate;\n  $saveCount = $game.saveCount;\n\n  $actionIndex = $game.actionIndex;\n  $actionArray = $game.actions;\n  $totalActions = $game.totalActions;\n\n  $totalTime = $game.totalTime; // Start the timer at the time the player left off\n  $currentTime = 0; // Initialize the play time\n\n  $(\"#currentTime .value\").html(\"--:--:--\");\n  $(\"#totalTime .value\").html(getFormatedTime($totalTime));\n\n  // Check if the history buttons should be enabled\n  checkHistoryButtons();\n\n  var cubeSetup = function(timeline) {\n    buildCube(function() {\n      // Set the camera to the default viewing angle and fade the cube in\n      timeline.to(\"#scene\", 1, { opacity:1, transform:defaultAngle, ease:Power4.easeOut, clearProps:\"all\",\n        onComplete: function() { $(\"#scene\").css(\"transform\", defaultAngle); }\n      });\n\n      // Start a new game\n      newGame();\n    });\n  }\n\n  var timeline = new TimelineMax();\n  if(reinit) {\n    // If the game is being reinitialized, tween the camera to its initial angle and make the cube fade\n    // Before building the new cube\n    timeline.to(\"#scene\", 1, { opacity:0, transform:\"matrix(1, 0, 0, 1, 0, 0)\" });\n    timeline.call(cubeSetup, [timeline]);\n  }\n  else {\n    // If this is the first initialization, set the camera to its initial angle and the cube's opacity to zero\n    // So that it fades in while being built\n    timeline.set(\"#scene\", { opacity:0, transform:\"matrix(1, 0, 0, 1, 0, 0)\" });\n    cubeSetup(timeline);\n  }\n}\n\nfunction newGame() {\n  // If the player is starting a new game, randomize the cube...\n  if($isNewGame) {\n    var randomCube = randomizeCube();\n    var randomActions = randomCube.randomActions;\n    var randomDelay = randomCube.delay;\n  }\n\n  // ... and wait until the animation is finished\n  // If the player is loading a game save, start right away\n  var delay = $isNewGame ? (randomActions * randomDelay) : 0;\n  setTimeout(function() {\n    checkFocus(function() {\n      // Add the listeners and start the timer\n      addListeners();\n\n      $startTotalTime = $game.totalTime;\n      $updateTimer = setInterval(updateTimer, 1000);\n      $isReady = true;\n    });\n  }, delay);\n}\n\nfunction saveGame() {\n  if(!$isReady) return;\n  $game.playerName = $playerName;\n  $game.finishDate = $finishDate;\n  $game.totalTime = $totalTime;\n  $game.saveCount = $saveCount;\n\n  $game.totalActions = $totalActions;\n  $game.actionIndex = $actionIndex;\n  $game.actions = $actionArray;\n\n  // Fetch each cube's data and put it in the save data\n  $(\".cube\").each(function() { $game.cubes[this.id] = $(this).data(); });\n\n  // Save the game in the local storage\n  setLocalStorage(\"psychoCube_Game\", $game);\n}\n\nfunction gameComplete() {\n  // Stop the timer and get the current date\n  clearInterval($updateTimer);\n  $finishDate = new Date();\n\n  // Add the completed game's data to the end screen\n  $(\"#screen_gameComplete .totalTime\").find(\".value\").html(getFormatedTime($totalTime));\n  $(\"#screen_gameComplete .totalActions\").find(\".value\").html($totalActions);\n  $(\"#screen_gameComplete .saveCount\").find(\".value\").html($saveCount);\n\n  setTimeout(function() {\n    // Show the end screen\n    toggleScreen(\"gameComplete\", true);\n\n    $(\"#bt_confirm\").on(eventtype, function() {\n      // If the player name has been entered\n      if($(\"#input_playerName\").val().length > 0) {\n        $playerName = $(\"#input_playerName\").val();\n\n        // Save the game a last time and put the data in the high scores\n        saveGame();\n        saveScore();\n      }\n      else {\n        // Visual feedback for the player\n        $(\"#input_playerName\").prop(\"disabled\", true);\n        setTimeout(function() { $(\"#input_playerName\").prop(\"disabled\", false); }, 1000);\n      }\n    });\n  }, 1000);\n}\n\nfunction saveScore() {\n  var newScore = { playerName: $game.playerName,\n                   finishDate: $game.finishDate,\n                   totalTime: $game.totalTime,\n                   saveCount: $game.saveCount,\n                   totalActions: $game.totalActions };\n\n  var highScores = getLocalStorage(\"psychoCube_HighScores\") || [[], [], [], [], [], [], [], [], [], []];\n  var newRecord = false;\n\n  // Add the new score to the high scores array at the right rank\n  for(var i = 0; i < highScores.length; i++) {\n    if(highScores[i].totalTime == undefined || newScore.totalTime < highScores[i].totalTime) {\n      for(var j = highScores.length - 2; j >= i; j--) {\n        highScores[j+1] = highScores[j];\n      }\n\n      highScores[i] = newScore;\n      setLocalStorage(\"psychoCube_HighScores\", highScores);\n      if(i == 0) newRecord = true; // If it tops the first rank, it's a new record\n      break;\n    }\n  }\n\n  // Delete the game save to allow new games\n  removeLocalStorage(\"psychoCube_Game\");\n\n  // Fade the end screen and show the results screen\n  toggleScreen(\"gameComplete\", false);\n  toHighScores();\n}\n\n\n//===============================\n// EVENT LISTENERS\nfunction addListeners() {\n//===============================\n  /* Cube controls ------------*/\n  $(\".cube\").on(eventtype, rotationMenu);\n  // No need to re-add the other listeners if the game has already been initialized once\n  if($listenersAdded) return;\n\n  /* Rotation menu mouse controls ------------*/\n  $(\"#rotationMenu .item\").on(eventtype, rotate);\n\n  /* Camera controls ------------*/\n  $(\"#tridiv\").on(\"mousedown touchstart\", startCameraRotation).on(\"mouseup touchend\", stopCameraRotation).on(\"mousemove touchmove\", setCameraRotation).on(\"mousewheel\", setCameraZoom);\n  $(\"#bt_resetCamera\").on(eventtype, function() {\n    TweenMax.to($(\"#scene\"), 1, { transform:defaultAngle, ease:Power4.easeOut, clearProps:\"all\",\n      onComplete:function() {\n        $(\"#scene\").css(\"transform\", defaultAngle);\n      }\n    });\n  });\n\n  /* Side menu buttons ------------*/\n  $(\"#bt_pause\").on(eventtype, togglePause);\n  $(\"#bt_undo\").on(eventtype, undo);\n  $(\"#bt_redo\").on(eventtype, redo);\n\n  $(\"#bt_saveGame\").on(eventtype, function() {\n    if(!$isReady) return;\n    // Save the game and increment the save counter\n    saveGame();\n    $saveCount++;\n\n    // Visual feedback for the player\n    $(\"#bt_saveGame\").prop(\"disabled\", true).html(\"Game saved\");\n    setTimeout(function() { $(\"#bt_saveGame\").prop(\"disabled\", false).html(\"Save game\"); }, 1000);\n  });\n\n  $(\"#bt_newCube\").on(eventtype, function() { if($isReady) initGame(true, true); });\n  $(\"#bt_glowSwitch\").on(eventtype, glowSwitch);\n  $(\"#bt_soundSwitch\").on(eventtype, soundSwitch);\n\n  $(\"#bt_highScores\").on(eventtype, toHighScores);\n  $(\"#bt_about\").on(eventtype, function() { toggleScreen(\"about\", true); });\n\n  $(\"#bt_resetCube\").on(eventtype, resetCube);\n\n  $(\"#screen_highScores .close\").on(eventtype, function() {\n    toggleScreen(\"highScores\", false);\n\n    // If the player has just finished a party, start a new game after exiting\n    if($finishDate) setTimeout(function() { initGame(true, true); }, 600);\n  });\n\n  /* Keyboard controls ------------*/\n  $(window).on(\"keydown\", function(e) {\n    if($(\".overlay.active\").length > 0) return;\n\n    var noKeyModifier = (e.shiftKey == false) && (e.ctrlKey == false) && (e.altKey == false);\n\n    // Rotation menu\n    var action;\n\n    if(e.which == 70 && e.shiftKey)                                 // SHIFT + F : front counterclockwise\n      action = { axis: \"z\", coord: 1, direction: -1 };\n    else if(e.which == 70)                                          // F : front clockwise\n      action = { axis: \"z\", coord: 1, direction: 1 };\n    if(e.which == 83 && e.shiftKey)                                 // SHIFT + S : standing counterclockwise\n      action = { axis: \"z\", coord: 2, direction: -1 };\n    else if(e.which == 83 && noKeyModifier)                         // S : standing clockwise\n      action = { axis: \"z\", coord: 2, direction: 1 };\n    if(e.which == 66 && e.shiftKey)                                 // SHIFT + B : back counterclockwise (inverted for notation coherence)\n      action = { axis: \"z\", coord: 3, direction: 1 };\n    else if(e.which == 66)                                          // B : back clockwise (inverted for notation coherence)\n      action = { axis: \"z\", coord: 3, direction: -1 };\n\n    if(e.which == 85 && e.shiftKey)                                 // SHIFT + U : up counterclockwise (inverted for notation coherence)\n      action = { axis: \"y\", coord: 1, direction: 1 };\n    else if(e.which == 85)                                          // U : up clockwise (inverted for notation coherence)\n      action = { axis: \"y\", coord: 1, direction: -1 };\n    if(e.which == 69 && e.shiftKey)                                 // SHIFT + E : equator counterclockwise\n      action = { axis: \"y\", coord: 2, direction: -1 };\n    else if(e.which == 69)                                          // E : equator clockwise\n      action = { axis: \"y\", coord: 2, direction: 1 };\n    if(e.which == 68 && e.shiftKey)                                 // SHIFT + D : down counterclockwise\n      action = { axis: \"y\", coord: 3, direction: -1 };\n    else if(e.which == 68)                                          // D : down clockwise\n      action = { axis: \"y\", coord: 3, direction: 1 };\n\n    if(e.which == 76 && e.shiftKey)                                 // SHIFT + L : left counterclockwise\n      action = { axis: \"x\", coord: 1, direction: -1 };\n    else if(e.which == 76)                                          // L : left clockwise\n      action = { axis: \"x\", coord: 1, direction: 1 };\n    if(e.which == 77 && e.shiftKey)                                 // SHIFT + M : middle counterclockwise\n      action = { axis: \"x\", coord: 2, direction: -1 };\n    else if(e.which == 77)                                          // M : middle clockwise\n      action = { axis: \"x\", coord: 2, direction: 1 };\n    if(e.which == 82 && e.shiftKey)                                 // SHIFT + R : right counterclockwise (inverted for notation coherence)\n      action = { axis: \"x\", coord: 3, direction: -1 };\n    else if(e.which == 82  && noKeyModifier)                        // R : right clockwise (inverted for notation coherence)\n      action = { axis: \"x\", coord: 3, direction: 1 };\n\n    // If an action was determined based on the keyboard input and the game isn't paused\n    // Rotate the cube and stop analyzing the event\n    if(action && !$(\"body\").hasClass(\"paused\")) { rotate(null, action); return; }\n    \n    // Side menu\n    if(e.which == 82 && e.altKey)                                   // ALT + R : Reset camera\n      $(\"#bt_resetCamera\").trigger(eventtype);\n    if(e.which == 90 && e.altKey)                                   // ALT + Z : Undo\n      $(\"#bt_undo\").trigger(eventtype);\n    if(e.which == 89 && e.altKey)                                   // ALT + Y : Redo\n      $(\"#bt_redo\").trigger(eventtype);\n    if(e.which == 32)                                               // Spacebar : Pause\n      $(\"#bt_pause\").trigger(eventtype);\n    if(e.which == 83 && e.altKey)                                   // ALT + S : Save game\n      $(\"#bt_saveGame\").trigger(eventtype);\n    if(e.which == 78 && e.altKey)                                   // ALT + N : New cube\n      $(\"#bt_newCube\").trigger(eventtype);\n  });\n\n  /* Pause the game and mute the sounds when the window is inactive ------------*/\n  $(window).on(\"blur\", function() {\n    pause();\n    if($audioEngine.ready) $audioEngine.mute();\n  }).on(\"focus\", function() {\n    if($audioEngine.ready) $audioEngine.unMute();\n  });\n\n  /* Ask the player to confirm before closing the window ------------*/\n  $(window).on(\"beforeunload\", function(e) {\n    var askConfirmation = false;\n\n    // If there is a game save\n    if(getLocalStorage(\"psychoCube_Game\")) {\n      // Check if any progress has been made since it was loaded\n      // If that's the case, prompt the player\n      if($totalActions != $game.totalActions) askConfirmation = true;\n    }\n    // If the player has never saved before\n    else {\n      // Check if any action has been made\n      // If that's the case, prompt the player\n      if($totalActions > 0) askConfirmation = true;\n    }\n\n    if(!askConfirmation) return;\n\n    var confirmationMessage = \"Your progress hasn't been saved. Do you really wish to leave?\";\n    (e || window.event).returnValue = confirmationMessage;     // Gecko and Trident\n    return confirmationMessage;                                // Gecko and WebKit\n  });\n\n  // Add a flag when the listeners have been added\n  $listenersAdded = true;\n}\n\n\n//===============================\n// TIMER\n//===============================\nfunction updateTimer() {\n  $currentTime++;\n  $totalTime = $startTotalTime + $currentTime;\n\n  $(\"#currentTime .value\").html(getFormatedTime($currentTime));\n  $(\"#totalTime .value\").html(getFormatedTime($totalTime));\n}\n\nfunction getFormatedTime(seconds) {\n  var h = Math.floor(seconds / 3600);\n  var m = Math.floor(seconds / 60) % 60;\n  var s = seconds % 60;\n\n  if(h < 10) h = \"0\"+h;\n  if(m < 10) m = \"0\"+m;\n  if(s < 10) s = \"0\"+s;\n\n  var timeString = h+\":\"+m+\":\"+s;\n  return timeString;\n}\n\nfunction getFormatedDate(date) {\n  var dateData = new Date(date);\n  var monthName = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n  var dateString = dateData.getDate() > 9 ? dateData.getDate() : \"0\"+dateData.getDate();\n  dateString += \" \"+monthName[dateData.getMonth()];\n  dateString += \" \"+dateData.getFullYear();\n  dateString += \" - \";\n  dateString += dateData.getHours() > 9 ? dateData.getHours()+\":\" : \"0\"+dateData.getHours()+\":\";\n  dateString += dateData.getMinutes() > 9 ? dateData.getMinutes() : \"0\"+dateData.getMinutes();\n\n  return dateString;\n}\n\nfunction pause() {\n  if($(\"body\").hasClass(\"paused\") || !$isReady) return;\n\n  clearInterval($updateTimer);\n  $(\"#bt_pause\").html(\"Resume\");\n  $(\"#bt_undo, #bt_redo\").prop(\"disabled\", true);\n  $(\"body\").addClass(\"paused\");\n\n  // Cancel any cube selection\n  cancelSelection();\n}\n\nfunction resume() {\n  if(!$(\"body\").hasClass(\"paused\") || !$isReady) return;\n\n  $updateTimer = setInterval(updateTimer, 1000);\n  $(\"#bt_pause\").html(\"Pause\");\n  checkHistoryButtons(); // Check if the history buttons should be enabled\n  $(\"body\").removeClass(\"paused\");\n}\n\nfunction togglePause() {\n  if($(\"body\").hasClass(\"paused\")) resume();\n  else pause();\n}\n\n\n//===============================\n// ROTATION MENU\n//===============================\nfunction rotationMenu(e) {\n  var target = e.currentTarget;\n  // If the cube selection has been cancelled or the game is paused, cancel the request\n  if(cancelSelection(e) || $(\"body\").hasClass(\"paused\")) return;\n\n  // For mobile devices, check the touch events instead to detect the cube selection\n  if(mobileCheck()) e = e.originalEvent.touches[0];\n\n  var posX = e.pageX;\n  var posY = e.pageY;\n  // Position the rotation menu where the player clicked\n  $(\"#rotationMenu\").css({ left:posX+\"px\", top:posY+\"px\" });\n\n  // If a cube is being selected \n  if(!$(\"body\").hasClass(\"selecting\")) {\n    // Open the rotation menu after it has finished moving to the designated place\n    setTimeout(function() { $(\"#rotationMenu\").addClass(\"open\"); }, 200);\n    // And add the \"selecting\" flag to the body\n    $(\"body\").addClass(\"selecting\").on(eventtype, cancelSelection);\n  }\n  // If not, remove all \"selected\" flags on the cubes\n  else $(\".cube.selected\").removeClass(\"selected\");\n\n  // Add the \"selected\" flag on the cube the player clicked on\n  if($(target) != $(\"body\")) $(target).addClass(\"selected\");\n}\n\nfunction cancelSelection(e) {\n  var check = false;\n  var target = e ? e.currentTarget : null;\n\n  // If a cube is being selected\n  if($(\"body\").hasClass(\"selecting\")) {\n    // And the player has either just clicked on that cube or an empty area, or there is no target at all\n    if(!target || $(\".cube.selected\")[0] == target || $(e.target).closest(\".cube\").length == 0) {\n      // Cancel the selection\n      $(\".cube.selected\").removeClass(\"selected\");\n      $(\"body\").removeClass(\"selecting\").off(eventtype, cancelSelection);\n      $(\"#rotationMenu\").removeClass(\"open\");\n\n      check = true;\n    }\n  }\n\n  return check;\n}\n\n\n//===============================\n// ROTATION ACTIONS & HISTORY\n//===============================\nfunction rotate(e, action) {\n  var cube = $(\".cube.selected\"); // Find the currently selected cube, if any\n  var action = action || {}; // Fetch the action passed as an argument, or create an empty object to create it\n\n  // If there's an event passed as an argument, the player is selecting a cube\n  // And the action needs to be determined\n  if(e) {\n    // Determining the rotation to apply depending on which button the player clicked\n    var target = e.currentTarget;\n\n    if(target.id == \"bt_front\")\n      action = { axis: \"z\", coord: cube.data(\"z\"), direction: 1 };\n\n    if(target.id == \"bt_back\")\n      action = { axis: \"z\", coord: cube.data(\"z\"), direction: -1 };\n\n    if(target.id == \"bt_left\")\n      action = { axis: \"y\", coord: cube.data(\"y\"), direction: -1 };\n\n    if(target.id == \"bt_right\") \n      action = { axis: \"y\", coord: cube.data(\"y\"), direction: 1 };\n\n    if(target.id == \"bt_up\")\n      action = { axis: \"x\", coord: cube.data(\"x\"), direction: -1 };\n\n    if(target.id == \"bt_down\") \n      action = { axis: \"x\", coord: cube.data(\"x\"), direction: 1 };\n  }\n\n  // Pushing the action in the history\n  $actionArray[$actionIndex++] = action;\n  // And removing any remaining actions following it\n  if($actionIndex < $actionArray.length) $actionArray.splice(-1, $actionIndex);\n\n  // Update the  history buttons status\n  checkHistoryButtons();\n\n  // Applying the rotation to the cube and incrementing the action counter\n  rotateCube(action.axis, action.coord, action.direction);\n  $totalActions++;\n\n  if(e) cancelSelection(e); // Cancel the selection on the cube, if there was one\n  if(checkCube()) gameComplete(); // Check if the cube has been solved\n}\n\nfunction undo() {\n  // Fetch the previous action in the history\n  var lastAction = $actionArray[--$actionIndex];\n\n  // Apply the rotation to the cube and incrementing the action counter\n  rotateCube(lastAction.axis, lastAction.coord, lastAction.direction * -1); // Reverse direction to undo the action\n  $totalActions++;\n\n  // Update the history buttons status\n  checkHistoryButtons();\n}\n\nfunction redo() {\n  // Fetch the next action in the history\n  var nextAction = $actionArray[$actionIndex++];\n\n  // Apply the rotation to the cube and incrementing the action counter\n  rotateCube(nextAction.axis, nextAction.coord, nextAction.direction);\n  $totalActions++;\n\n  // Update the  history buttons status\n  checkHistoryButtons();\n}\n\nfunction checkHistoryButtons() {\n  // If there's no previous action in the history, disable the undo button\n  if($actionIndex < 1) $(\"#bt_undo\").prop(\"disabled\", true);\n  else $(\"#bt_undo\").prop(\"disabled\", false);\n\n  // If there's no next action in the history, disable the redo button\n  if($actionIndex >= $actionArray.length) $(\"#bt_redo\").prop(\"disabled\", true);\n  else $(\"#bt_redo\").prop(\"disabled\", false);\n}\n\n\n//===============================\n// TOOLBOX\n//===============================\nfunction checkFocus(callback) {\n  var waitForFocus = function() {\n    callback();\n    $(window).off(\"focus\", waitForFocus);\n  };\n\n  if(document[\"hasFocus\"]()) callback();\n  else $(window).on(\"focus\", waitForFocus);\n}\n\nfunction debugMode(state) {\n  if(state == true) $(\"html\").addClass(\"debug\");\n  else if(state == false) $(\"html\").removeClass(\"debug\");\n  else $(\"html\").toggleClass(\"debug\");\n}\n\nfunction glowSwitch(state) {\n  if(state == true) { $(\"html\").addClass(\"noGlow\"); $(\"#bt_glowSwitch i\").removeClass(\"fa-toggle-on\").addClass(\"fa-toggle-off\"); }\n  else if(state == false) { $(\"html\").removeClass(\"noGlow\"); $(\"#bt_glowSwitch i\").removeClass(\"fa-toggle-off\").addClass(\"fa-toggle-on\"); }\n  else { $(\"html\").toggleClass(\"noGlow\"); $(\"#bt_glowSwitch i\").toggleClass(\"fa-toggle-on fa-toggle-off\"); }\n}\n\nfunction soundSwitch(state) {\n  if(state == true) { $audioEngine.unMute(); $(\"#bt_soundSwitch i\").removeClass(\"fa-toggle-on\").addClass(\"fa-toggle-off\"); }\n  else if(state == false) { $audioEngine.mute(); $(\"#bt_soundSwitch i\").removeClass(\"fa-toggle-off\").addClass(\"fa-toggle-on\"); }\n  else { $audioEngine.toggleMute(); $(\"#bt_soundSwitch i\").toggleClass(\"fa-toggle-on fa-toggle-off\"); }\n}\n\nfunction clearProps(timeline) {\n  var targets = timeline.getChildren();\n  timeline.kill();\n\n  for (var i=0; i<targets.length; i++) {\n    if(targets[i].target != null)\n      TweenMax.set(targets[i].target, {clearProps:\"all\"});\n  }\n}\n\nfunction scrollToValue(target, from, to, toFixed, fadeIn, text, noSFX) {\n  var tween;\n  var text = text || \"\";\n\n  tween = TweenMax.to($({someValue: from}), .4, {someValue: to, ease:Power3.easeInOut,\n    onStart:function() {\n      if(fadeIn) TweenMax.from(target, .2, { opacity:0, ease:Power4.easeOut, clearProps:\"all\" });\n    },\n    onUpdate:function(tween) {\n      if(!noSFX && parseFloat(target.html()) != tween.target[0].someValue) $audioEngine.SFX.play(\"count\");\n      target.html((tween.target[0].someValue).toFixed(toFixed)+text);\n    },\n    onUpdateParams:[\"{self}\"]\n  });\n\n  return tween;\n}\n\nfunction getCSSstyle(selector, property, valueOnly) {\n  var styleSheets = document.styleSheets;\n  var classes = [];\n\n  for(var i = 0; i < styleSheets.length; i++) {\n    if(!styleSheets[i].ownerNode.attributes.href.value.match(\"http|//\")) {\n      var rules = styleSheets[i].rules || styleSheets[i].cssRules;\n      if(rules) classes.push(rules);\n    }\n  }\n\n  for(var i = 0; i < classes.length; i++) {\n    for(var j = 0; j < classes[i].length; j++) {\n        if(classes[i][j].selectorText && classes[i][j].selectorText.indexOf(selector) != -1) {\n            if(property) {\n              if(valueOnly) return parseFloat(classes[i][j].style[property]);\n              else return classes[i][j].style[property];\n            }\n            else {\n              if(classes[i][j].cssText) return classes[i][j].cssText\n              else return classes[i][j].style.cssText;\n            }\n        }\n    }\n  }\n};\n\n\n//===============================\n// LOCAL STORAGE\n//===============================\nfunction setLocalStorage(key, value) { localStorage.setItem(key, JSON.stringify(value)); }\nfunction getLocalStorage(key)        { return JSON.parse(localStorage.getItem(key)); }\nfunction removeLocalStorage(key)     { localStorage.removeItem(key); }\n\n\n//===============================\n// MOBILE DETECTION\n// http://stackoverflow.com/a/11381730/989439\n//===============================\nfunction mobileCheck() {\n  var check = false;\n  (function(a){if(/(android|ipad|playbook|silk|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))) check = true})(navigator.userAgent||navigator.vendor||window.opera);\n  return check;\n}\n\nfunction phoneCheck() {\n  var check = false;\n  (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))) check = true})(navigator.userAgent||navigator.vendor||window.opera);\n  return check;\n}\n\nfunction tabletCheck() {\n  var check = false;\n  if(!phoneCheck() && mobileCheck()) check = true;\n  return check;\n}\n\n\n//===============================\n// GOOGLE ANALYTICS\n(function(b,o,i,l,e,r){\n//===============================\n  b.GoogleAnalyticsObject=l;b[l]||(b[l]=function(){(b[l].q=b[l].q||[]).push(arguments)});b[l].l=+new Date;\n  e=o.createElement(i);r=o.getElementsByTagName(i)[0];\n  e.src='//www.google-analytics.com/analytics.js';\n  r.parentNode.insertBefore(e,r)\n}(window,document,'script','ga'));\nga('create','UA-43190815-1');ga('send','pageview');",
			"file": "app/js/main.js",
			"file_size": 36099,
			"file_write_time": 130796987122294765,
			"settings":
			{
				"buffer_size": 35268,
				"line_ending": "Windows"
			}
		},
		{
			"file": "TODO.txt",
			"settings":
			{
				"buffer_size": 1268,
				"line_ending": "Windows",
				"name": "- Rubik's cube rotation logic"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 490.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"",
				"Preferences: Browse Packages"
			]
		],
		"width": 549.0
	},
	"console":
	{
		"height": 144.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/vbissengue.LAP-EBZ30/Documents/psychoCube",
		"/C/Users/vbissengue.LAP-EBZ30/Documents/psychoCube/app",
		"/C/Users/vbissengue.LAP-EBZ30/Documents/psychoCube/app/css",
		"/C/Users/vbissengue.LAP-EBZ30/Documents/psychoCube/psd"
	],
	"file_history":
	[
		"/C/Users/vbissengue.LAP-EBZ30/Documents/psychoCube/app/css/main.css",
		"/C/Users/vbissengue.LAP-EBZ30/Documents/psychoCube/app/css/main.css.map",
		"/C/Users/vbissengue.LAP-EBZ30/Documents/psychoCube/app/css/main.scss",
		"/C/Users/vbissengue.LAP-EBZ30/Documents/psychoCube/app/img/mwpsb_logo.svg",
		"/C/Users/vbissengue.LAP-EBZ30/Documents/psychoCube/app/img/menu.svg",
		"/C/Users/vbissengue.LAP-EBZ30/Downloads/svg-menu (1).svg",
		"/C/Users/vbissengue.LAP-EBZ30/Downloads/svg-menu.svg",
		"/C/Users/vbissengue.LAP-EBZ30/Documents/psychoCube/app/index - Copie.html",
		"/C/wamp/www/devTests/adopteUnMec/mFooter/index_iPad.html",
		"/C/wamp/www/devTests/adopteUnMec/mTab/css/style.scss",
		"/C/wamp/www/devTests/adopteUnMec/mFooter/css/style.scss",
		"/C/wamp/www/devTests/adopteUnMec/mTab/js/main.js",
		"/C/wamp/www/devTests/adopteUnMec/mFooter/js/main.js",
		"/C/wamp/www/devTests/adopteUnMec/mFooter/index_spAndroid.html",
		"/C/wamp/www/devTests/adopteUnMec/mTab/index_spAndroid.html",
		"/C/wamp/www/devTests/adopteUnMec/mTab/index_iPad.html",
		"/C/wamp/www/devTests/mcdo/mTab/index_iPad.html",
		"/C/wamp/www/devTests/mcdo/mFooter/js/main.js",
		"/C/wamp/www/devTests/mcdo/mTab/js/main.js",
		"/C/wamp/www/devTests/mcdo/mFooter/css/style.scss",
		"/C/wamp/www/devTests/mcdo/mTab/css/style.scss",
		"/C/wamp/www/devTests/mcdo/mFooter/index_iPad.html",
		"/C/wamp/www/devTests/mcdo/mFooter/index_spAndroid.html",
		"/C/wamp/www/devTests/mcdo/mTab/index_spAndroid.html",
		"/C/wamp/www/devTests/clubMed/studioCompiler.html",
		"/C/Users/vbissengue.LAP-EBZ30/Documents/psychoCube/app/js/camera.js",
		"/C/Users/vbissengue.LAP-EBZ30/Documents/psychoCube/app/js/cube.js",
		"/C/wamp/www/devTests/clubMed/mFooter/css/style.scss",
		"/C/wamp/www/devTests/clubMed/mTab/css/style.scss",
		"/C/wamp/www/devTests/clubMed/mTab/index_iPad.html",
		"/C/wamp/www/devTests/clubMed/mFooter/index_iPad.html",
		"/C/wamp/www/devTests/clubMed/mFooter/js/main.js",
		"/C/wamp/www/devTests/clubMed/mTab/js/main.js",
		"/C/wamp/www/devTests/clubMed/mTab/index_spAndroid.html",
		"/C/wamp/www/devTests/toyota/studioCompiler.html",
		"/C/wamp/www/devTests/toyota/mTab/js/main.js",
		"/C/wamp/www/devTests/toyota/mFooter/js/main.js",
		"/C/wamp/www/devTests/toyota/mFooter/index_iPad.html",
		"/C/wamp/www/devTests/toyota/mFooter/index_spAndroid.html",
		"/C/wamp/www/devTests/toyota/mFooter/css/style.scss",
		"/C/wamp/www/devTests/toyota/mTab/css/style.scss",
		"/C/wamp/www/devTests/toyota/mTab/index_iPad.html",
		"/C/wamp/www/devTests/toyota/mTab/index_spAndroid.html",
		"/C/Users/vbissengue.LAP-EBZ30/Documents/psychoCube/app/css/reset.css",
		"/C/wamp/www/devTests/oreo/custom/css/style.css",
		"/C/wamp/www/devTests/nrjMobile/mtab/index_iPad.html",
		"/C/wamp/www/devTests/nrjMobile/mtab/css/reset.css",
		"/C/wamp/www/devTests/nrjMobile/studioCompiler.html",
		"/C/wamp/www/devTests/opel/mFlow/css/style.scss",
		"/C/Users/vbissengue.LAP-EBZ30/Downloads/rubikscube/lib/cube.js",
		"/C/Users/vbissengue.LAP-EBZ30/Documents/psychoCube/.gitignore",
		"/C/Users/vbissengue.LAP-EBZ30/Documents/psychoCube/app/js/controls.js",
		"/C/Users/vbissengue.LAP-EBZ30/Downloads/rubikscube/lib/cube3d.js",
		"/C/Users/vbissengue.LAP-EBZ30/Downloads/rubikscube/lib/rubik_center.obj",
		"/C/wamp/www/devTests/nrjMobile/mtab/css/style.scss",
		"/C/wamp/www/devTests/nrjMobile/mfooter/css/style.scss",
		"/C/wamp/www/devTests/nrjMobile/mfooter/js/main.js",
		"/C/wamp/www/devTests/nrjMobile/mfooter/index_spAndroid.html",
		"/C/wamp/www/devTests/nrjMobile/mfooter/index_iPad.html",
		"/C/wamp/www/devTests/nrjMobile/mtab/js/main.js",
		"/C/wamp/www/devTests/nrjMobile/mtab/index_spAndroid.html",
		"/C/wamp/www/devTests/opel/mFlow/index_iPad.html",
		"/C/wamp/www/meteorRain/js/main.js",
		"/C/wamp/www/meteorRain/css/main.scss",
		"/C/wamp/www/devTests/opel/mTab/css/style.scss",
		"/C/wamp/www/devTests/opel/mTab/js/main.js",
		"/C/wamp/www/devTests/opel/mTab/index_spAndroid.html",
		"/C/wamp/www/devTests/opel/mTab/index_iPad.html",
		"/C/wamp/www/meteorRain/main.js",
		"/C/wamp/www/meteorRain/index.html",
		"/C/wamp/www/meteorRain/main.css",
		"/C/wamp/www/devTests/rover/mtab/js/main.js",
		"/C/wamp/www/devTests/rover/mtab/css/style.scss",
		"/C/wamp/www/devTests/rover/mfooter/js/main.js",
		"/C/wamp/www/devTests/rover/mfooter/index_spAndroid.html",
		"/C/wamp/www/devTests/rover/mfooter/index_iPad.html",
		"/C/wamp/www/devTests/rover/mfooter/css/style.scss",
		"/C/wamp/www/devTests/rover/mtab/index_iPad.html",
		"/C/wamp/www/devTests/rover/mtab/index_spAndroid.html",
		"/C/wamp/www/devTests/sncf2/mTab/js/main.js",
		"/C/wamp/www/devTests/sncf2/mFooter/index_spAndroid.html",
		"/C/wamp/www/devTests/sncf2/mTab/css/style.scss",
		"/C/wamp/www/devTests/sncf2/mFooter/css/style.css",
		"/C/wamp/www/devTests/sncf2/mFooter/css/style.scss",
		"/C/wamp/www/devTests/sncf2/mTab/index_spAndroid.html",
		"/C/wamp/www/devTests/sncf2/mFooter/index_iPad.html",
		"/C/wamp/www/devTests/sncf2/mFooter/js/main.js",
		"/C/wamp/www/devTests/oreo/custom/js/main.js",
		"/C/wamp/www/devTests/oreo/mFooter/tablet/js/main.js",
		"/C/wamp/www/devTests/oreo/mFooter/tablet/index_mamans.html",
		"/C/Users/vbissengue.LAP-EBZ30/Downloads/rubiks-cube_1331197276_demo_package/js/quaternion.js",
		"/C/Users/vbissengue.LAP-EBZ30/Downloads/rubiks-cube_1331197276_demo_package/js/rubik.js",
		"/C/Users/vbissengue.LAP-EBZ30/Downloads/rubiks-cube_1331197276_demo_package/js/oz.js",
		"/C/Users/vbissengue.LAP-EBZ30/Downloads/rubiks-cube_1331197276_demo_package/js/css3.oz.js",
		"/C/Users/vbissengue.LAP-EBZ30/Downloads/rubiks-cube_1331197276_demo_package/css/style.css",
		"/E/labs/psychoCube/package.json",
		"/E/labs/psychoCube/bower.json",
		"/E/labs/psychoCube/Gruntfile.js",
		"/E/labs/waltzRevolution/app/js/audio.js",
		"/E/labs/waltzRevolution/app/js/song.js",
		"/E/labs/waltzRevolution/app/css/main.css",
		"/D/wamp/www/test/synthcube/index.html",
		"/D/uTorrent/AUTODESK.MAYA.V2016.WIN64-ISO/nfo.nfo",
		"/E/labs/waltzRevolution/app/js/waltz.json",
		"/E/labs/waltzRevolution/app/js/jquery.ba-throttle-debounce.min.js",
		"/E/labs/waltzRevolution/.gitignore",
		"/E/labs/waltzRevolution/app/js/game_OK.js",
		"/E/labs/waltzRevolution/app/js/game_latest.js",
		"/E/labs/waltzRevolution/app/js/main_OK.js",
		"/E/labs/waltzRevolution/app/js/main_latest.js",
		"/E/labs/waltzRevolution/app/js/game_latest",
		"/E/labs/waltzRevolution/app/js/game.js",
		"/C/Users/Leivvi/AppData/Local/Microsoft/Windows/Temporary Internet Files/Content.IE5/LZCRZZLT/s5-style[1].js",
		"/C/Users/Leivvi/Downloads/movies.list",
		"/E/labs/waltzRevolution/app/js/main.js",
		"/E/labs/waltzRevolution/app/js/input.js",
		"/E/labs/waltzRevolution/app/css/fonts/onlinefontconverter.com/converted-files/font.css",
		"/E/labs/waltzRevolution/app/index.html",
		"/E/labs/waltzRevolution/app/js/controller.js",
		"/E/labs/waltzRevolution/app/css/main.scss",
		"/E/labs/waltzRevolution/node_modules/grunt-usemin/lib/file.js",
		"/E/labs/waltzRevolution/node_modules/bower/node_modules/mout/object/forOwn.js",
		"/E/labs/waltzRevolution/node_modules/bower/node_modules/configstore/node_modules/js-yaml/node_modules/argparse/node_modules/lodash/object/forOwnRight.js",
		"/E/labs/waltzRevolution/bower_components/modernizr/feature-detects/forms-speechinput.js",
		"/E/labs/waltzRevolution/node_modules/grunt-modernizr/node_modules/uglify-js/test/unit/compress/expected/forstatement.js",
		"/E/labs/waltzRevolution/node_modules/bower/node_modules/tar-fs/node_modules/tar-stream/node_modules/readable-stream/lib/_stream_passthrough.js",
		"/E/labs/waltzRevolution/node_modules/grunt-autoprefixer/node_modules/autoprefixer-core/node_modules/postcss/lib/css-syntax-error.js",
		"/E/labs/waltzRevolution/node_modules/grunt/node_modules/findup-sync/node_modules/glob/node_modules/minimatch/test/extglob-ending-with-state-char.js"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"C:\\Users\\vbissengue.LAP-EBZ30\\Documents\\psychoCube"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"bg",
			"not",
			"<span class=\"col col5\"></span>",
			"span class=\"col col5\"></span>",
			"<span class=\"col col6\"></span>",
			"span class=\"col col6\"></span>",
			"span class=\"col col6\">-</span>",
			"span class=\"col col5\">-</span>",
			"<span class=\"col col4\"></span>",
			"<span class=\"col col3\"></span>",
			"cta",
			"cancel",
			"font-size",
			"0px",
			"0em",
			"darkGre",
			"#222",
			"#111",
			"200,",
			"content",
			"click",
			"025",
			"255, 255, 255, .025",
			"px",
			"\\$actionArray =",
			"history",
			"h2",
			"button",
			"1.5e",
			"cta",
			"\\.init",
			"left",
			"right",
			"iPad",
			"data-value",
			"levitate",
			"logo",
			"iPad",
			"typeArray",
			"getCoord",
			"stickerIndex",
			"coordIndex",
			"otationState",
			"stickerId",
			"parameters",
			"d",
			"iPad",
			"glowFX",
			"glowMode",
			"getCurrentTransform",
			"transform",
			"color",
			"set",
			"defaultTransform",
			"defaultT",
			"\\.blue",
			"\\.yellow",
			"\\.green",
			"\\.white",
			"\\.orange",
			"\\.red",
			"pyramid-right",
			"pyramid-left",
			"pyramid-bottom",
			"pyramid-top",
			"pyramid-back",
			"pyramid-front",
			"particles",
			"iPad",
			"timeline",
			"media",
			"replace",
			"col",
			"0",
			"opacify",
			"images",
			"scripts",
			"styles",
			"h2",
			"\\$offWhite",
			"#F8F4F0",
			"$offWhite",
			"noteIn",
			"noteScale",
			"progress",
			"duplicateCurrentSource",
			"createS",
			"create",
			"play",
			"progress",
			"percent",
			"drawA",
			"draw",
			"analyserNode",
			"this.analyserNode",
			"drawA",
			"screen_loading",
			"\\$(\"#screen_loading\"",
			"exte",
			"\\$game",
			"if\\(\\$game",
			"if\\(\\!\\$game",
			"if\\(\\!$game",
			"if\\(\\\\!$game",
			"if\\(\\!$game",
			"if\\(\\\\!$game",
			"if\\(\\$game",
			"if(\\$game",
			"note",
			"thro",
			"\\/\\/",
			"\\/\\*",
			"18px",
			"panel",
			"Size(20)",
			"Size(20",
			"pane",
			"fontSize22px",
			"hud",
			"calc",
			"vw",
			"fontSize7",
			"radius",
			"Record",
			"newRec",
			"};",
			"fontSize18px",
			"$fontSize18px"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"<span class=\"col col5\">-</span>",
			"<span class=\"col col6\">-</span>",
			"<span class=\"col col5\">-</span>",
			"<span class=\"col col4\">-</span>",
			"<span class=\"col col3\">-</span>",
			"-",
			"0",
			".loading",
			"top",
			"bottom",
			"spAndroid",
			"data-shortcut",
			"spAndroid",
			"rotationArray",
			"rotationStep",
			"otationStep",
			"stickerCoord",
			"spAndroid",
			"glowFX",
			"defaultAngle",
			".color-blue",
			".color-yellow",
			".color-green",
			".color-white",
			".color-orange",
			".color-red",
			"blue",
			"yellow",
			"green",
			"white",
			"orange",
			"red",
			"fireflies",
			"spAndroid",
			"intro",
			"img",
			"js",
			"css",
			"px",
			"$game",
			"game",
			"currentPosition",
			"currentPosition()",
			"$audioEngine.BGM",
			"$audioEngine",
			"this.",
			"$game.song",
			"this.keyMap",
			"$game.",
			"this.",
			"launchGameMobile",
			"launchGame",
			"launchGameMobile()",
			"launchGame()",
			"screen_pause",
			"screen_play",
			"screen_results",
			"$progress",
			"highScores",
			"maxScore",
			"lightGrey",
			"hasTiedNote",
			"$darkGrey",
			"$offWhite",
			"$orange",
			"gameComplete",
			"rank",
			"okPerc[closestNoteIndex]",
			"\\.score",
			"\\.notes",
			"\\._notes",
			"._notes",
			"tn",
			"tnB",
			"tiedNote",
			"TiedNote",
			"tnBeat",
			"isTiedNote",
			":false",
			"song",
			".tmp/css",
			"<%= config.app %>/img",
			"<%= config.app %>/css",
			"<%= config.app %>/js",
			"init",
			"crossfading",
			"audioEngine",
			"allSoundLoaded",
			"#credits",
			"max-width: 320px",
			"max-height",
			"soundSwitch",
			"max-width:",
			"(max-width:",
			".btCancel",
			".btStart",
			".btInvite",
			".btRandom",
			"#000, #021522",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "app/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21641,
						"regions":
						{
						},
						"selection":
						[
							[
								2285,
								2285
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "app/css/main.scss",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26236,
						"regions":
						{
						},
						"selection":
						[
							[
								701,
								701
							]
						],
						"settings":
						{
							"syntax": "Packages/Syntax Highlighting for Sass/Syntaxes/SCSS.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "app/js/main.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35268,
						"regions":
						{
						},
						"selection":
						[
							[
								28350,
								28350
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11898.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "TODO.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1268,
						"regions":
						{
						},
						"selection":
						[
							[
								1268,
								1268
							]
						],
						"settings":
						{
							"auto_name": "- Rubik's cube rotation logic",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 25.0
	},
	"pinned_build_system": "",
	"project": "psychoCube.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 270.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
